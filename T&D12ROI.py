# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FxGDCZd6leQOA34jkhXuzf1OMjR1aZMi
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

pip install bs4

df = pd.read_csv('/content/customer_dataset_csv.txt')

display(df)

"""Recência: A quando dias fez a ultima compra."""

R = df[['customer_id', 'last_purchase_date', 'days_since_last_purchase']]
R = R.sort_values('last_purchase_date', ascending= False)
display(R)

"""Frequência: quantidades de compras em um periódo."""

print("Compras por cliente em seu período:")
print(df[['customer_id', 'first_purchase_date', 'last_purchase_date', 'total_orders']].head())

first_paid = df['first_purchase_date'].min()
last_paid = df['last_purchase_date'].max()

all_paids_period = df['total_orders'].sum()

print(f'De {first_paid} até {last_paid}')
print(f'Total de compras no período: {all_paids_period}')

"""Valor: Custo total por cliente"""

print(df[['customer_id', 'total_spent']].head(10))

"""**RFV**"""

df['R'] = df['days_since_last_purchase']
df['F'] = df['total_orders']
df['V'] = df['total_spent']

"""OUTLIERS"""

#dados basicos
print(df[['R', 'F', 'V']].describe())

#Outliers
print(f"Recência maior que 170 dias: {len(df[df['R'] > 170])}")
print(f"Frequência maior que 20 pedidos: {len(df[df['F'] > 20])}")
print(f"Valores maiores que 4000: {len(df[df['V'] > 4000])}")
print(f"Bons clientes de valores altos: {len(df[df['V'] > 2000])}")
print(f"Clientes inativos 90+ dias: {len(df[df['R'] > 90])}")
print(f"Clientes fracos 1-2 pedidos: {len(df[df['F'] <= 2])}")

plt.figure(figsize=(8, 6))
plt.scatter(df['F'], df['V'], c=df['R'], cmap='viridis', alpha=0.6, s=50)
plt.colorbar(label='R')
plt.xlabel('F')
plt.ylabel('V')
plt.title('Mapa RFV dos clientes')
plt.show()

"""**Segmentação**  Score Ponderado"""

df['RFV_Score'] = (df['R'] * 0.3) + (df['F'] * 0.3) + (df['V'] * 0.4)

display(df['RFV_Score'])

"""Verificando a segmentação seguinte, ela se da o sentido devido a soma de cada RFV transformada em score, dessa maneira podendo verificar com clareza quais são os clientes mais fiés, caros e frequentes.

**Continuação** Criando seguimentos estratégicos
"""

# Criar quintis para a definição

df['R_Score'] = pd.qcut(df['R'], 5, labels=[5,4,3,2,1]) # Quanto menor a recência é melhor
df['F_Score'] = pd.qcut(df['F'].rank(method='first'), 5, labels=[1,2,3,4,5])
df['V_Score'] = pd.qcut(df['V'].rank(method='first'), 5, labels=[1,2,3,4,5])

df['R_Score'] = df['R_Score'].astype(int)
df['F_Score'] = df['F_Score'].astype(int)
df['V_Score'] = df['V_Score'].astype(int)

# Definir segmentos principais

def classificar_semento(row):
  r, f, v = row['R_Score'], row['F_Score'], row['V_Score']

  if r >= 4 and f >= 4 and v >= 4:
    return 'Campeoes'
  elif r <= 2 and f >= 3 and v >= 3:
    return 'Em_Risco'
  elif r >= 4 and f >= 2:
    return 'Novos'
  elif f >= 3 and v >= 3:
    return 'Fieis'
  else:
    return 'Outros'

df['Segmento'] = df.apply(classificar_semento, axis=1)

# Analise nos segmentos

resumo_segmentos = df.groupby('Segmento').agg({
    'customer_id': 'count',
    'total_spent': ['sum', 'mean'],
    'days_since_last_purchase': 'mean',
    'total_orders': 'mean',
    'avg_order_value': 'mean'
}).round(2)

resumo_segmentos.columns = ['Qtd_Clientes', 'Receita_Total', 'Receita_Media', 'Dias_Inativo', 'Pedidos_Medios', 'Ticket_Medio']

total_clientes = len(df)
total_receita = df['total_spent'].sum()

resumo_segmentos['Perc_Clientes'] = (resumo_segmentos['Qtd_Clientes'] / total_clientes * 100).round(1)
resumo_segmentos['Perc_Receita'] = (resumo_segmentos['Receita_Total'] / total_receita * 100).round(1)

print(resumo_segmentos.sort_values('Receita_Total'))

# Estratégias por segmento

estrategias = {
    'Campeoes': {
        'acao': 'Email vip mensal',
        'oferta': '10% desconto',
        'custo': 50,
        'meta': 'Manter 95% ativos'
    },
    'Em_Risco': {
        'acao': 'Email',
        'oferta': '25% desconto',
        'custo': 80,
        'meta': 'Manter 95% ativos'
    },
    'Fieis': {
        'acao': 'Cross-sell quinzenal',
        'oferta': 'Kit com desconto',
        'custo': 30,
        'meta': 'Aumentar ticket 30%'
    },
    'Novo': {
        'acao': 'Email boas-vindas',
        'oferta': '15% segunda compra',
        'custo': 25,
        'meta': '50% fazem segunda compra'
    },
    'Outros': {
        'acao': 'Email promocional',
        'oferta': '20% desconto',
        'custo': 15,
        'meta': '25% conversao'
    }

}

investimento_total = 0

for segmento in estrategias:
  if segmento in resumo_segmentos.index:
    dados = resumo_segmentos.loc[segmento]
    qtd = int(dados['Qtd_Clientes'])
    receita = dados['Receita_Total']

    custo_total = qtd * estrategias[segmento]['custo']
    investimento_total += custo_total

    print(f'\n{segmento}:')
    print(f"  Clientes: {qtd:,} ({dados['Perc_Clientes']}%)")
    print(f"  Receita: R$ {receita:,.0f}")
    print(f"  Acao: {estrategias[segmento]['acao']}")
    print(f"  Oferta: {estrategias[segmento]['oferta']}")
    print(f"  Custo: R$ {custo_total:,}")
    print(f"  Meta: {estrategias[segmento]['meta']}")

print(f"\nTOTAL INVESTIMENTO MENSAL: R$ {investimento_total:,}")
print("ROI ESPERADO: 250-400%")